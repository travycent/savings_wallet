name: Deploy-ewallet-prod
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest  
    steps:
      - name: Deploy to Prod
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{secrets.HOST_DNS_PROD}} # IP address of the server you wish to ssh into
          key: ${{secrets.EC2_SSH_PRIVATE_KEY_PROD}} # Private or public key of the server
          username: ${{ secrets.USERNAME_PROD }} # User of the server you want to ssh into

          script: |
            sudo su
            rm -rf ~/my_app/*
            cd ~/my_app
            git clone https://github.com/travycent/savings_wallet.git 
            cd ./savings_wallet/
            docker-compose -f docker-compose.yml down
            docker compose build
            docker compose up -d
            echo 'Deployment successful'

#  build
# # Trigger Deploy on Push Main Branch
# on:
#   push:
#     branches:
#       - main 

# jobs:
#   deploy:
#     name: Deploy to Prod
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Stop and remove existing containers
#         run: docker-compose -f docker-compose.yml down
      
#       - name: Deploy to Production Server 
#         uses: easingthemes/ssh-deploy@main

#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY_PROD }}
#           REMOTE_HOST: ${{ secrets.HOST_DNS_PROD }}
#           REMOTE_USER: ${{ secrets.USERNAME_PROD }}
#           TARGET: ${{ secrets.TARGET_DIR_PROD }}

#       - name: Set up Docker Compose
#         run: docker-compose -f docker-compose.yml up -d

#       - name: Wait for services to start
#         run: sleep 20

#       # - name: Run tests (if you have tests)
#       #   run: docker-compose -f docker-compose.yml exec web python manage.py test

#       # Add more steps here as needed for your deployment process

#       - name: Stop services and clean up
#         run: docker-compose -f docker-compose.yml down
